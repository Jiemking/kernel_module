name: C/C++ CI

on:
  push:
    branches: [ 'main' ]
  pull_request:
    branches: [ 'main' ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        kernel_version: [ '4.14.180','4.14.186','4.14.186cfi','4.19.113', '4.19.157','5.4', '5.10', '5.15','6.1' ]
    steps:

      - uses: actions/checkout@v4
        with:
          path: kernel_module
          fetch-depth: 0

      - name: configure
        run: |
          
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends libelf-dev device-tree-compiler repo gcc-aarch64-linux-gnu
          mkdir results
          
          if [[ "${{ matrix.kernel_version }}" != 5.15 && "${{ matrix.kernel_version }}" != "6.*" ]]; then
          export ORIGINAL_PATH=$PATH
          
          # unrecognized option '-EL'
          if [[ "${{ matrix.kernel_version }}" == 4.19.1111 ]]; then
            git clone https://github.com/pkm774/android-kernel-tools.git --depth=1 gcc
            export CROSS_COMPILE_COMPAT=$(pwd)/gcc/bin/arm-linux-androideabi-
            export CROSS_COMPILE=$(pwd)/gcc/bin/aarch64-linux-android-
            export PATH=$(pwd)/gcc/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/bin:$PATH
          
          elif [[ "${{ matrix.kernel_version }}" == 4.* || "${{ matrix.kernel_version }}" == 5.4 ]]; then
            git clone https://github.com/kdrag0n/proton-clang.git clang --depth=1
            export CROSS_COMPILE_COMPAT=$(pwd)/clang/bin/arm-linux-gnueabi-
            export CROSS_COMPILE=$(pwd)/clang/bin/aarch64-linux-gnu-
            git clone https://github.com/Nicklas373/aosp-clang.git -b r383902 --depth=1 clang-aosp
            export PATH=$(pwd)/clang-aosp/bin:$PATH
          else
            git clone https://github.com/kdrag0n/proton-clang.git clang --depth=1
            export CROSS_COMPILE_COMPAT=$(pwd)/clang/bin/arm-linux-gnueabi-
            export CROSS_COMPILE=$(pwd)/clang/bin/aarch64-linux-gnu-
            git clone https://github.com/Nicklas373/aosp-clang.git -b r412851 --depth=1 clang-aosp
            export PATH=$(pwd)/clang-aosp/bin:$PATH
          fi
          
          fi
          
          if [[ "${{ matrix.kernel_version }}" == 4.14.180 ]]; then
             cd $GITHUB_WORKSPACE
             mkdir android-kernel && cd android-kernel
             git clone https://github.com/Laulan56/android_kernel_xiaomi_sm8150.git -b miui --recurse-submodules --depth=1 ./

             ln -sf $GITHUB_WORKSPACE/kernel_module/kernel $(pwd)/drivers/km
             cat arch/arm64/configs/raphael_defconfig arch/arm64/configs/vendor/sm8150-perf_defconfig > arch/arm64/configs/new_defconfig
             make CC=clang ARCH=arm64 O=out new_defconfig
             make CC=clang ARCH=arm64 O=out prepare -j$(nproc --all)
             make CC=clang ARCH=arm64 O=out scripts -j$(nproc --all)
             make CC=clang ARCH=arm64 O=out modules_prepare -j$(nproc --all)
             make -C $(pwd)/out M=$(pwd)/drivers/km ARCH=arm64 SUBARCH=arm64 modules CC=clang -j$(nproc --all)
             mv $(pwd)/drivers/km/hack.ko $GITHUB_WORKSPACE/results/hack.ko
          elif [[ "${{ matrix.kernel_version }}" == 4.14.186 ]]; then
             cd $GITHUB_WORKSPACE
             mkdir android-kernel && cd android-kernel
             git clone https://github.com/MiCode/Xiaomi_Kernel_OpenSource.git -b ares-r-oss --depth=1 ./

             ln -sf $GITHUB_WORKSPACE/kernel_module/kernel $(pwd)/drivers/km
             make CC=clang LD=ld.lld ARCH=arm64 LLVM=1 LLVM_IAS=1 O=out ares_user_defconfig
             make CC=clang LD=ld.lld ARCH=arm64 LLVM=1 LLVM_IAS=1 O=out CONFIG_LTO_CLANG=y CONFIG_LTO_NONE=n CONFIG_LTO_CLANG_THIN=y CONFIG_LTO_CLANG_FULL=n prepare -j$(nproc --all)
             make CC=clang LD=ld.lld ARCH=arm64 LLVM=1 LLVM_IAS=1 O=out CONFIG_LTO_CLANG=y CONFIG_LTO_NONE=n CONFIG_LTO_CLANG_THIN=y CONFIG_LTO_CLANG_FULL=n scripts -j$(nproc --all)
             make CC=clang LD=ld.lld ARCH=arm64 LLVM=1 LLVM_IAS=1 O=out CONFIG_LTO_CLANG=y CONFIG_LTO_NONE=n CONFIG_LTO_CLANG_THIN=y CONFIG_LTO_CLANG_FULL=n modules_prepare -j$(nproc --all)
             make -C $(pwd)/out M=$(pwd)/drivers/km ARCH=arm64 SUBARCH=arm64 modules CC=clang LD=ld.lld LLVM=1 LLVM_IAS=1 -j$(nproc --all)
             mv $(pwd)/drivers/km/hack.ko $GITHUB_WORKSPACE/results/hack.ko
          
          elif [[ "${{ matrix.kernel_version }}" == 4.14.186cfi ]]; then
             cd $GITHUB_WORKSPACE
             mkdir android-kernel && cd android-kernel
             git clone https://github.com/MiCode/Xiaomi_Kernel_OpenSource.git -b cannon-r-oss --depth=1 ./

             ln -sf $GITHUB_WORKSPACE/kernel_module/kernel $(pwd)/drivers/km
             make CC=clang ARCH=arm64 LLVM=1 LLVM_IAS=1 O=out cannon_user_defconfig
             make CC=clang LD=ld.lld ARCH=arm64 LLVM=1 LLVM_IAS=1 O=out CONFIG_LTO_CLANG=y CONFIG_LTO_NONE=n CONFIG_LTO_CLANG_THIN=y CONFIG_LTO_CLANG_FULL=n prepare -j$(nproc --all)
             make CC=clang LD=ld.lld ARCH=arm64 LLVM=1 LLVM_IAS=1 O=out CONFIG_LTO_CLANG=y CONFIG_LTO_NONE=n CONFIG_LTO_CLANG_THIN=y CONFIG_LTO_CLANG_FULL=n scripts -j$(nproc --all)
             make CC=clang LD=ld.lld ARCH=arm64 LLVM=1 LLVM_IAS=1 O=out CONFIG_LTO_CLANG=y CONFIG_LTO_NONE=n CONFIG_LTO_CLANG_THIN=y CONFIG_LTO_CLANG_FULL=n modules_prepare -j$(nproc --all)
             make -C $(pwd)/out M=$(pwd)/drivers/km ARCH=arm64 SUBARCH=arm64 modules CC=clang LD=ld.lld LLVM=1 LLVM_IAS=1 -j$(nproc --all)
             mv $(pwd)/drivers/km/hack.ko $GITHUB_WORKSPACE/results/hack.ko
          
          elif [[ "${{ matrix.kernel_version }}" == 4.19.113 ]]; then
             cd $GITHUB_WORKSPACE
             mkdir android-kernel && cd android-kernel
             git clone https://github.com/enenH/Xiaomi_Kernel_OpenSource.git -b alioth-r-oss --depth=1 ./

             ln -sf $GITHUB_WORKSPACE/kernel_module/kernel $(pwd)/drivers/km
             make CC=clang ARCH=arm64 O=out alioth_user_defconfig
             make CC=clang ARCH=arm64 O=out prepare -j$(nproc --all)
             make CC=clang ARCH=arm64 O=out scripts -j$(nproc --all)
             make CC=clang ARCH=arm64 O=out modules_prepare -j$(nproc --all)
             make -C $(pwd)/out M=$(pwd)/drivers/km ARCH=arm64 SUBARCH=arm64 modules CC=clang -j$(nproc --all)
             mv $(pwd)/drivers/km/hack.ko $GITHUB_WORKSPACE/results/hack.ko
          
          elif [[ "${{ matrix.kernel_version }}" == 4.19.157 ]]; then
             cd $GITHUB_WORKSPACE
             mkdir android-kernel && cd android-kernel
             git clone https://github.com/MiCode/Xiaomi_Kernel_OpenSource.git -b dagu-s-oss --depth=1 ./

             ln -sf $GITHUB_WORKSPACE/kernel_module/kernel $(pwd)/drivers/km
             make CC=clang ARCH=arm64 LLVM=1 LLVM_IAS=1 O=out dagu_user_defconfig
             make CC=clang ARCH=arm64 LLVM=1 LLVM_IAS=1 O=out CONFIG_LTO_CLANG=y CONFIG_LTO_NONE=n CONFIG_LTO_CLANG_THIN=y CONFIG_LTO_CLANG_FULL=n prepare -j$(nproc --all)
             make CC=clang ARCH=arm64 LLVM=1 LLVM_IAS=1 O=out CONFIG_LTO_CLANG=y CONFIG_LTO_NONE=n CONFIG_LTO_CLANG_THIN=y CONFIG_LTO_CLANG_FULL=n scripts -j$(nproc --all)
             make CC=clang ARCH=arm64 LLVM=1 LLVM_IAS=1 O=out CONFIG_LTO_CLANG=y CONFIG_LTO_NONE=n CONFIG_LTO_CLANG_THIN=y CONFIG_LTO_CLANG_FULL=n modules_prepare -j$(nproc --all)
             make -C $(pwd)/out M=$(pwd)/drivers/km ARCH=arm64 SUBARCH=arm64 modules CC=clang LD=ld.lld LLVM=1 LLVM_IAS=1 -j$(nproc --all)
             mv $(pwd)/drivers/km/hack.ko $GITHUB_WORKSPACE/results/hack.ko
          
          elif [[ "${{ matrix.kernel_version }}" == 5.4 ]]; then
             cd $GITHUB_WORKSPACE
             mkdir android-kernel && cd android-kernel
             git clone https://github.com/MiCode/Xiaomi_Kernel_OpenSource.git -b venus-r-oss --depth=1 ./

             ln -sf $GITHUB_WORKSPACE/kernel_module/kernel $(pwd)/drivers/km
             $(pwd)/scripts/gki/generate_defconfig.sh venus-qgki_defconfig
             make CC=clang ARCH=arm64 LLVM=1 LLVM_IAS=1 O=out vendor/venus-qgki_defconfig
             make CC=clang ARCH=arm64 LLVM=1 LLVM_IAS=1 O=out CONFIG_LTO_CLANG=y CONFIG_LTO_NONE=n CONFIG_LTO_CLANG_THIN=y CONFIG_LTO_CLANG_FULL=n prepare -j$(nproc --all)
             make CC=clang ARCH=arm64 LLVM=1 LLVM_IAS=1 O=out CONFIG_LTO_CLANG=y CONFIG_LTO_NONE=n CONFIG_LTO_CLANG_THIN=y CONFIG_LTO_CLANG_FULL=n scripts -j$(nproc --all)
             make CC=clang ARCH=arm64 LLVM=1 LLVM_IAS=1 O=out CONFIG_LTO_CLANG=y CONFIG_LTO_NONE=n CONFIG_LTO_CLANG_THIN=y CONFIG_LTO_CLANG_FULL=n modules_prepare -j$(nproc --all)
             make -C $(pwd)/out M=$(pwd)/drivers/km ARCH=arm64 SUBARCH=arm64 modules CC=clang LD=ld.lld LLVM=1 LLVM_IAS=1 -j$(nproc --all)
             mv $(pwd)/drivers/km/hack.ko $GITHUB_WORKSPACE/results/hack.ko
          
          elif [[ "${{ matrix.kernel_version }}" == 5.10 ]]; then
            cd $GITHUB_WORKSPACE
            mkdir android-kernel && cd android-kernel
            repo init --depth=1 --u https://android.googlesource.com/kernel/manifest -b common-android12-5.10-2023-09 --repo-rev=v2.16
            repo --trace sync -c -j$(nproc --all) --no-tags

            ln -sf $GITHUB_WORKSPACE/kernel_module/kernel $(pwd)/common/drivers/km
            cd common
            make CC=clang ARCH=arm64 LLVM=1 LLVM_IAS=1 O=out gki_defconfig
            make CC=clang ARCH=arm64 LLVM=1 LLVM_IAS=1 O=out CONFIG_LTO_CLANG=y CONFIG_LTO_NONE=n CONFIG_LTO_CLANG_THIN=y CONFIG_LTO_CLANG_FULL=n prepare -j$(nproc --all)
            make CC=clang ARCH=arm64 LLVM=1 LLVM_IAS=1 O=out CONFIG_LTO_CLANG=y CONFIG_LTO_NONE=n CONFIG_LTO_CLANG_THIN=y CONFIG_LTO_CLANG_FULL=n scripts -j$(nproc --all)
            make CC=clang ARCH=arm64 LLVM=1 LLVM_IAS=1 O=out CONFIG_LTO_CLANG=y CONFIG_LTO_NONE=n CONFIG_LTO_CLANG_THIN=y CONFIG_LTO_CLANG_FULL=n modules_prepare -j$(nproc --all)
            make -C $(pwd)/out M=$(pwd)/drivers/km ARCH=arm64 SUBARCH=arm64 modules CC=clang LD=ld.lld LLVM=1 LLVM_IAS=1 -j$(nproc --all)
            mv $(pwd)/drivers/km/hack.ko $GITHUB_WORKSPACE/results/hack.ko
          
          elif [[ "${{ matrix.kernel_version }}" == 5.15 ]]; then
            cd $GITHUB_WORKSPACE
            mkdir android-kernel && cd android-kernel
            repo init --depth=1 --u https://android.googlesource.com/kernel/manifest -b common-android13-5.15-2023-09 --repo-rev=v2.16
            repo --trace sync -c -j$(nproc --all) --no-tags

            ln -sf $GITHUB_WORKSPACE/kernel_module/kernel $(pwd)/common/drivers/km
            DRIVER_MAKEFILE=$(pwd)/common/drivers/Makefile
            printf "\nobj-m += km/\n" >> "$DRIVER_MAKEFILE"
            echo "drivers/km/hack.ko" >> common/android/gki_aarch64_modules
            LTO=thin BUILD_CONFIG=common/build.config.gki.aarch64 build/build.sh

            OUTDIR=$GITHUB_WORKSPACE/android-kernel/out/android13-5.15/dist
            if [ ! -e $OUTDIR ]; then
              OUTDIR=$GITHUB_WORKSPACE/android-kernel/dist
            fi

            mv $OUTDIR/hack.ko $GITHUB_WORKSPACE/results/hack.ko
          elif [[ "${{ matrix.kernel_version }}" == 6.1 ]]; then
            cd $GITHUB_WORKSPACE
            mkdir android-kernel && cd android-kernel
            repo init --depth=1 --u https://android.googlesource.com/kernel/manifest -b common-android14-6.1-2023-11 --repo-rev=v2.16
            repo --trace sync -c -j$(nproc --all) --no-tags

            ln -sf $GITHUB_WORKSPACE/kernel_module/kernel $(pwd)/common/drivers/km
            DRIVER_MAKEFILE=$(pwd)/common/drivers/Makefile
            printf "\nobj-m += km/\n" >> "$DRIVER_MAKEFILE"
            echo "drivers/km/hack.ko" >> common/android/gki_aarch64_modules
            if [ ! -e build/build.sh ]; then
            sed -i 's/needs unknown symbol/Dont abort when unknown symbol/g' build/kernel/*.sh || echo "No unknown symbol scripts found"
            if [ -e common/modules.bzl ]; then
              sed -i 's/_COMMON_GKI_MODULES_LIST = \[/_COMMON_GKI_MODULES_LIST = \[ "drivers\/km\/hack.ko",/g' common/modules.bzl
            fi
          else
            TARGET_FILE="build/kernel/build.sh"
            if [ ! -e "$TARGET_FILE" ]; then
              TARGET_FILE="build/build.sh"
            fi
            sed -i 's/needs unknown symbol/Dont abort when unknown symbol/g' $TARGET_FILE || echo "No unknown symbol in $TARGET_FILE"
            sed -i 's/if ! diff -u "\${KERNEL_DIR}\/\${MODULES_ORDER}" "\${OUT_DIR}\/modules\.order"; then/if false; then/g' $TARGET_FILE
            sed -i 's@${ROOT_DIR}/build/abi/compare_to_symbol_list@echo@g' $TARGET_FILE
            sed -i 's/needs unknown symbol/Dont abort when unknown symbol/g' build/kernel/*.sh || echo "No unknown symbol scripts found"
          fi
          
            #tools/bazel run --config=fast --lto=thin //common:kernel_aarch64_dist -- --dist_dir=dist --verbose_failures
            tools/bazel build --config=fast //common:kernel_aarch64_dist
            FILEPATH=$(find out/ -name "hack.ko" | head -n 1)
            echo $FILEPATH
            mv $FILEPATH $GITHUB_WORKSPACE/results/hack.ko
          elif [[ "${{ matrix.kernel_version }}" == 5.4 ]]; then
             cd $GITHUB_WORKSPACE

             mkdir android-kernel && cd android-kernel
             git clone https://github.com/OnePlusOSS/android_kernel_modules_and_devicetree_oneplus_sm8250.git -b oneplus/sm8250_t_13.1_op8 --depth=1 ./

             mkdir android-kernel && cd android-kernel
             git clone https://github.com/OnePlusOSS/android_kernel_oneplus_sm8250.git -b oneplus/sm8250_t_13.1_op8 --depth=1 kernel

             cd kernel
             ln -sf $GITHUB_WORKSPACE/kernel_module/kernel $(pwd)/drivers/km

             make CC=clang ARCH=arm64 LLVM=1 LLVM_IAS=1 O=out vendor/kona-perf_defconfig
             make CC=clang ARCH=arm64 LLVM=1 LLVM_IAS=1 O=out CONFIG_LTO_CLANG=y CONFIG_LTO_NONE=n CONFIG_LTO_CLANG_THIN=y CONFIG_LTO_CLANG_FULL=n prepare -j$(nproc --all)
             make CC=clang ARCH=arm64 LLVM=1 LLVM_IAS=1 O=out CONFIG_LTO_CLANG=y CONFIG_LTO_NONE=n CONFIG_LTO_CLANG_THIN=y CONFIG_LTO_CLANG_FULL=n scripts -j$(nproc --all)
             make CC=clang ARCH=arm64 LLVM=1 LLVM_IAS=1 O=out CONFIG_LTO_CLANG=y CONFIG_LTO_NONE=n CONFIG_LTO_CLANG_THIN=y CONFIG_LTO_CLANG_FULL=n modules_prepare -j$(nproc --all)
             make -C $(pwd)/out M=$(pwd)/drivers/km ARCH=arm64 SUBARCH=arm64 modules CC=clang LD=ld.lld LLVM=1 LLVM_IAS=1 -j$(nproc --all)
             mv $(pwd)/drivers/km/hack.ko $GITHUB_WORKSPACE/results/hack.ko
          
          elif [[ "${{ matrix.kernel_version }}" == 4.19.157op ]]; then
             cd $GITHUB_WORKSPACE

             mkdir android-kernel && cd android-kernel
             git clone https://github.com/OnePlusOSS/android_kernel_modules_and_devicetree_oneplus_sm8250.git -b oneplus/sm8250_t_13.1_op8 --depth=1 ./

             mkdir android-kernel && cd android-kernel
             git clone https://github.com/OnePlusOSS/android_kernel_oneplus_sm8250.git -b oneplus/sm8250_t_13.1_op8 --depth=1 kernel

             cd kernel
             ln -sf $GITHUB_WORKSPACE/kernel_module/kernel $(pwd)/drivers/km

             make CC=clang ARCH=arm64 O=out vendor/kona-perf_defconfig
             make CC=clang ARCH=arm64 O=out CONFIG_LTO_CLANG=y CONFIG_LTO_NONE=n CONFIG_LTO_CLANG_THIN=y CONFIG_LTO_CLANG_FULL=n prepare -j$(nproc --all)
             make CC=clang ARCH=arm64 O=out CONFIG_LTO_CLANG=y CONFIG_LTO_NONE=n CONFIG_LTO_CLANG_THIN=y CONFIG_LTO_CLANG_FULL=n scripts -j$(nproc --all)
             make CC=clang ARCH=arm64 O=out CONFIG_LTO_CLANG=y CONFIG_LTO_NONE=n CONFIG_LTO_CLANG_THIN=y CONFIG_LTO_CLANG_FULL=n modules_prepare -j$(nproc --all)
             make -C $(pwd)/out M=$(pwd)/drivers/km ARCH=arm64 SUBARCH=arm64 modules CC=clang LD=ld.lld -j$(nproc --all)
             mv $(pwd)/drivers/km/hack.ko $GITHUB_WORKSPACE/results/hack.ko
          fi
          
          #sudo apt-get install llvm-15 -y
          #llvm-strip-15 --strip-unneeded $GITHUB_WORKSPACE/results/hack.ko

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.kernel_version }}.ko
          path: ./results/*
